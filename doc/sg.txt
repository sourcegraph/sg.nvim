================================================================================
INTRODUCTION                                                           *sg.nvim*

sg.nvim is a plugin for interfacing with Sourcegraph and Cody


================================================================================
SETUP                                                                 *sg.setup*

Config options for sg.nvim

All options can be set via

>lua
  require("sg").setup { ... }
<

sg.config                                                          *sg.config*


  Configuration Options: ~
    {node_executable}     (string)    path to node executable
    {cody_agent}          (string)    path to the cody-agent js bundle
    {did_change_debounce} (number)    Number of ms to debounce changes
    {on_attach}           (function)  function to run when attaching to
                                      sourcegraph buffers



================================================================================
COMMANDS                                                         *cody.commands*

Default commands for interacting with Cody

                                                                *:CodyExplain*
:CodyExplain ~
    Explain how to use Cody.

    Use from visual mode to pass the current selection

                                                                    *:CodyAsk*
:CodyAsk ~
    Ask a question about the current selection.

    Use from visual mode to pass the current selection

                                                                   *:CodyChat*
:CodyChat {module} ~
    State a new cody chat, with an optional {title}

                                                                  *:CodyFloat*
:CodyFloat ~
    Ask Cody about the selected code. Cody responds in a floating window.

                                                            *:CodyToggleFloat*
:CodyToggleFloat ~
    Hides/shows the Cody float window.

                                                                 *:CodyToggle*
:CodyToggle ~
    Toggles the current Cody Chat window.

                                                                *:CodyHistory*
:CodyHistory ~
    Select a previous chat from the current neovim session




================================================================================
COMMANDS"                                                      *"cody.commands"*

commands.explain({bufnr}, {start_line}, {end_line})        *sg.cody.explain()*
    Explain a piece of code


    Parameters: ~
        {bufnr}      (number)
        {start_line} (number)
        {end_line}   (number)


commands.ask({bufnr}, {start_line}, {end_line}, {message})     *sg.cody.ask()*
    Ask Cody about the selected code


    Parameters: ~
        {bufnr}      (number)
        {start_line} (number)
        {end_line}   (number)
        {message}    (string)


commands.chat({name})                                         *sg.cody.chat()*
    Start a new CodyChat


    Parameters: ~
        {name} (string?)

    Return: ~
        CodyLayout


commands.float({bufnr}, {start_line}, {end_line}, {message}) *sg.cody.float()*
    Get cody to respond in a floating window


    Parameters: ~
        {bufnr}      (number)
        {start_line} (number)
        {end_line}   (number)
        {message}    (string)


commands.history()                                         *sg.cody.history()*
    Open a selection to get an existing Cody conversation



commands.add_context({start_line}, {end_line}, {state}) *sg.cody.add_context()*
    Add context to an existing state


    Parameters: ~
        {start_line} (any)
        {end_line}   (any)
        {state}      (CodyState?)



================================================================================
COMMANDS                                                           *sg.commands*

Default commands for interacting with Sourcegraph

                                                            *:SourcegraphLink*
:SourcegraphLink ~
    Get a sourcegraph link to the current repo + file + line. Automatically
    adds it to your '+' register

                                                          *:SourcegraphSearch*
:SourcegraphSearch ~
    Run a search. For more sourcegraph search syntax, refer to online
    documentation

                                                           *:SourcegraphLogin*
:SourcegraphLogin ~
    Get prompted for endpoint and access_token if you don't want to set them
    via environment variables.

                                                           *:SourcegraphBuild*
:SourcegraphBuild ~
    Rebuild the Sourcegraph crates and required dependencies (in case build
    failed during installation)




================================================================================
RPC                                                                     *sg.rpc*

rpc.complete({snippet})                                    *sg.rpc.complete()*
    Complete a single string snippet NOTE: Must be called from async context


    Parameters: ~
        {snippet} (string)

    Return: ~
        string?: The error
        string?: The completion


rpc.repository({name})                                   *sg.rpc.repository()*
    Get the repository ID for a repo with a name


    Parameters: ~
        {name} (string)

    Return: ~
        string?: The error, if any
        string?: The repository ID, if found


rpc.embeddings({repo}, {query}, {opts})                  *sg.rpc.embeddings()*
    Get embeddings for the a repo & associated query.


    Parameters: ~
        {repo}  (string)  Repo name (github.com/neovim/neovim)
        {query} (any)     query string (the question you want to ask)
        {opts}  (table)   `code`: number of code results, `text`: number of
                          text results

    Return: ~
        string?: err, if any
        table?: list of embeddings



 vim:tw=78:ts=8:ft=help:norl:
