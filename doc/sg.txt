================================================================================
INTRODUCTION                                                           *sg.nvim*

sg.nvim is a plugin for interfacing with Sourcegraph and Cody

To login, either:

- Run `:SourcegraphLogin` after following installation instructions for
  `sourcegraph.com` usage.
- Run `:SourcegraphLogin!` and provide an endpoint and access token to be
  stored.
- Use the `SRC_ENDPOINT` and `SRC_ACCESS_TOKEN` environment variables to manage
  tokens for enterprise usage.
  - See
    [src-cli](https://github.com/sourcegraph/src-cli#log-into-your-sourcegraph-instance)
    for more info

See `:help sg.auth` for more information.

You can check that you're logged in by then running `:checkhealth sg`

M.setup({opts})                                                    *M.setup()*
    Setup sourcegraph


    Parameters: ~
        {opts} (sg)  .config



================================================================================
SETUP                                                                 *sg.setup*

Config options for sg.nvim

All options can be set via

>lua
  require("sg").setup { ... }
<

Other configuration notes:
- To configure options for the prompt, you can use `ftplugin/cody_prompt.lua`
- To configure options for the history, you can use `ftplugin/cody_history.lua`

sg.config                                                          *sg.config*


  Configuration Options: ~
    {enable_cody}       (boolean?)               Enable/disable cody
                                                 integration
    {accept_tos}        (boolean?)               Accept the TOS without being
                                                 prompted
    {chat}              (sg.config.chat?)        Chat configuration
    {download_binaries} (boolean?)               Default true, download latest
                                                 release from Github
    {node_executable}   (string?)                path to node executable
    {skip_node_check}   (boolean?)               Useful if using other js
                                                 runtime
    {cody_agent}        (string?)                path to the cody-agent js
                                                 bundle
    {on_attach}         (function?)              function to run when
                                                 attaching to sg://<file>
                                                 buffers
    {src_headers}       (table<string, string>)  Headers to be sent with each
                                                 sg request


sg.config.chat                                                *sg.config.chat*


  Configuration Options: ~
    {default_model} (string)  The name of the default model to use



================================================================================
UPGRADE                                                             *sg.upgrade*

Cody has two tiers of usage currently available. To see up-to-date information
about rate-limiting and usage guidelines, see:
- Cody Dashboard: https://sourcegraph.com/cody/manage
- Manage your subscription: https://sourcegraph.com/cody/subscription

- The default version is the Cody Free version.
- The Cody Pro version has higher rate limits for both chat and code
  completions.

Any questions about accounts or about what might be spurious ratelimiting,
please reach out to Sourcegraph at:
- https://sourcegraph.com/community


================================================================================
AUTH                                                                   *sg.auth*

How to manage authentication for Sourcegraph within Neovim (both for Cody and
for Sourcegraph)

To manage your sourcegraph account, visit:
    - https://sourcegraph.com/cody/manage

Use SRC_ENDPOINT and SRC_ACCESS_TOKEN environment variables to manually
override previous configuration.

If you're not using the environment variables, then you may need to
authenticate when accessing the variables on startup. If you prefer to not have
this behavior, then you should load the environment variables into the
environment before opening neovim.

Otherwise use |:SourcegraphLogin| to set up authentication.

NOTE: Cody-App support has been removed (for now). We're currently exploring
what App will look like in the future, but it will not currently be supported
anymore.


M.get()                                                        *sg.auth.get()*
    Gets authorization from the environment variables. It is possible these
    will be initialized from previous session configuration, if not already
    present.



    Return: ~
        SourcegraphAuthConfig?



================================================================================
COMMANDS                                                         *cody.commands*

Default commands for interacting with Cody

                                                                    *:CodyAsk*
:CodyAsk ~
    Ask a question about the current selection.

                                                                *:CodyExplain*
:CodyExplain ~
    Ask a question about the current selection.

                                                                *:CodyChat{!}*
:CodyChat{!} {title} ~
    State a new cody chat, with an optional {title}

                                                                 *:CodyToggle*
:CodyToggle ~
    Toggles the current Cody Chat window.

                                                                   *:CodyTask*
:CodyTask {task_description} ~
    Instruct Cody to perform a task on selected text.

                                                                *:CodyRestart*
:CodyRestart ~
    Restarts Cody and Sourcegraph, clearing all state.



M.setup({config})                                               *cody.setup()*
    Setup Cody


    Parameters: ~
        {config} (sg)  .config



================================================================================
LUA-COMMANDS                                                 *cody.lua-commands*

commands.ask_range({bufnr}, {start_row}, {end_row}, {message}, {opts}) *sg.cody.commands.ask_range()*
    Ask Cody about the selected code


    Parameters: ~
        {bufnr}     (number)
        {start_row} (number)
        {end_row}   (number)
        {message}   (string)
        {opts}      (cody)    .ChatOpts


commands.autocomplete({request}, {callback}) *sg.cody.commands.autocomplete()*
    Send an autocomplete request


    Parameters: ~
        {request}  ({ filename: string, row: number, col: number })      ?
        {callback} (function(err: table, data: CodyAutocompleteResult))


commands.chat({new}, {opts})                         *sg.cody.commands.chat()*
    Open a cody chat

    To configure keymaps, you can do something like:

    This will disable <c-c> in insert mode from getting mapped by Cody.

    >lua
      require("sg.cody.commands").chat(true, {
        keymaps = {
          i = {
            ["<c-c>"] = false,
          },
        },
      })
<

    Additionally, you can map more functionality like so:

    >lua
      require("sg.cody.commands").chat(true, {
        keymaps = {
          i = {
            ["hello"] = { "Says Hello", function(chat) print("hello") end },
          },
        },
      })
<



    Parameters: ~
        {new}  (boolean)
        {opts} (cody)     .ChatOpts


commands.toggle()                                  *sg.cody.commands.toggle()*
    Toggle a Cody chat



commands.do_task({bufnr}, {start_line}, {end_line}, {message}) *sg.cody.commands.do_task()*
    Ask Cody to preform a task on the selected code.


    Parameters: ~
        {bufnr}      (number)
        {start_line} (number)
        {end_line}   (number)
        {message}    (string)


commands.history()                                *sg.cody.commands.history()*
    Open a selection to get an existing Cody conversation



commands.focus_history()                    *sg.cody.commands.focus_history()*
    Focus the currently active history window.

    Can be set to a keymap by:
    >lua
      vim.keymap.set('n', '<leader>ch', function()
        require("sg.cody.commands").focus_history()
      end)
<



commands.focus_prompt()                      *sg.cody.commands.focus_prompt()*
    Focus the currently active prompt.

    Can be set to a keymap by:
    >lua
      vim.keymap.set('n', '<leader>cp', function()
        require("sg.cody.commands").focus_prompt()
      end)
<




================================================================================
COMMANDS                                                           *sg.commands*

Default commands for interacting with Sourcegraph

                                                           *:SourcegraphLogin*
:SourcegraphLogin ~
    Get prompted for endpoint and access_token if you don't

                                                           *:SourcegraphClear*
:SourcegraphClear ~
    Remove Sourcegraph Login information

                                                           *:SourcegraphBuild*
:SourcegraphBuild ~
    Rebuild the Sourcegraph crates and required dependencies (in case build
    failed during installation)

                                                *:SourcegraphDownloadBinaries*
:SourcegraphDownloadBinaries ~
    (Re-)Download the sourcegraph binaries. This should happen during
    installation

                                                            *:SourcegraphLink*
:SourcegraphLink ~
    Get a sourcegraph link to the current repo + file + line.

                                                          *:SourcegraphSearch*
:SourcegraphSearch ~
    Run a search. For more sourcegraph search syntax, refer to online
    documentation

                                                     *:CodyIgnoreNotification*
:CodyIgnoreNotification ~
    Ingore particular notifications




================================================================================
RPC                                                                     *sg.rpc*

rpc.get_entry({path}, {callback})                         *sg.rpc.get_entry()*
    Get an SgEntry based on a path


    Parameters: ~
        {path}     (string)
        {callback} (fun(err: string?, entry: SgEntry?))


rpc.get_file_contents({remote}, {oid}, {path}, {callback}) *sg.rpc.get_file_contents()*
    Get file contents for a sourcegraph file


    Parameters: ~
        {remote}   (string)
        {oid}      (string)
        {path}     (string)
        {callback} (fun(err: string?, contents: string[]?))  nil


rpc.get_directory_contents({remote}, {oid}, {path}) *sg.rpc.get_directory_contents()*
    Get directory contents for a sourcegraph directory


    Parameters: ~
        {remote} (string)
        {oid}    (string)
        {path}   (string)

    Return: ~
        string?: err, if any
        SgEntry[]?: contents, if successful


rpc.get_search({query}, {callback})                      *sg.rpc.get_search()*
    Get search results


    Parameters: ~
        {query}    (string)
        {callback} (function(err: string?, res: SgSearchResult[]?))


rpc.get_info()                                             *sg.rpc.get_info()*
    Get info about current sourcegraph info



rpc.get_link({path}, {position}, {callback})               *sg.rpc.get_link()*
    Get info about current sourcegraph info


    Parameters: ~
        {path}     (string)
        {position} ({ start_line: number, start_col: number, end_line: number, end_col: number })
        {callback} (any)



================================================================================
CMP                                                                   *cody.cmp*

Completion source for nvim-cmp.

To enable, add `"cody"` to your nvim-cmp sources.

For example:

>lua
    require("cmp").setup {
      ...,
      sources = cmp.config.sources({
        { name = "cody" },
        { name = "nvim_lsp" },
      },
      ...
    }
<

Cody items are highlighted with the `CmpItemKindCody` highlight group. You can
override the default color using |:highlight|

>lua
    vim.api.nvim_set_hl(0, "CmpItemKindCody", { fg = "Red" })
<

Optionally, you can trigger Cody Completions manually by doing:

>lua
  require("cmp").setup {
    mapping = {
      ...,
      -- Manually trigger cody completions
      ["<c-a>"] = cmp.mapping.complete {
        config = {
          sources = {
            { name = "cody" },
          },
        },
      },
    },
  }
<

You can add formatting via the `formatting` field in nvim-cmp. For example,
here's how you could configure if you're using `lspkind`:

>lua
  require('cmp').setup {
    ...,
    formatting = {
      format = lspkind.cmp_format {
        with_text = true,
        menu = {
          nvim_lsp = "[LSP]",
          ...,
          cody = "[cody]",
        },
      },
    }
  }
<

See |cmp-config.sources| for more information



================================================================================
COC                                                                   *cody.coc*

Completion source for coc.nvim

To enable, you need to install coc.nvim.

At this time, it's not published to npm, but you can load the plugin by adding
`npm run build` to your installattion.

For example, if you're using Plug, you can do:

>vim
    Plug 'sourcegraph/sg.nvim', { 'do': 'nvim -l build/init.lua --install-coc-nvim' }
<




 vim:tw=78:ts=8:ft=help:norl:
